Ensure both your JDK and JRE versions are up to date. 
You can check the version of the compiler and enviornment via <javac -version> and <java -version> respectively.
My local linux distribution runs openJDK 18, and while earlier versions may work, I can only verify it does for certain on 18 or higher.

Github link: https://github.com/Zjwghg-2/Project-3.git

As requested, a makefile is provided for the code.
    To compile & run, execute:	make full
    To only compile, execute:	make
    To only run, execute: 	make run
    				  OR, if already compiled,
    			        java Main [number of nodes] [number of switches]
    To clean, execute:		make clean
PLEASE NOTE: 
    The default number of nodes is 5, and number of switches is 3 . To change this, for example, to 10 nodes, append "NODE=10" to "make full" or "make run" 
    "make clean" will clear all node input and output files
    Main.java creates the node output files randomly, as requested.

Usage(PLEASE read this):
    execute via:  java Main [number of nodes] [number of switches]
    Nodes are randomly assigned to switches, with a guarantee of at least 1 per network,
       so please ensure the number of nodes is no smaller than the number of switches
    The node output files are randomly generated upon running, but the firewall file is NOT randomly generated.
    Nowhere in the document does it say we must generate the firewall file ourselves. Please be aware of this fact.
       when you make the firewall file, keep in mind that there is a guarantee of 1 node per any given switch.
       so, 2_1 is guaranteed to exist, but 2_2 is not.

Frame Scheme:
    Slightly expanded upon from prior work, with extra fields added in addition to request to make control smoother.
    Format: [SourceNetwork][SourceNode][DestNetwork][DestNode][SequenceNumber][CRC][Size][Ack/Data]

    Network and node ID are treated separately for smoother parsing, and as a side note technically allows more of each
    Each node adds a sequence number to its frames so that data can be tracked.
        This prevents issues arising from potential duplicate frames, as well as explicit acks for each received frame.
    As requested, only one of ack or data will be present in the actual data.  In the object itself, the proper field
      will be present, and the other field will be filled with dummy data for the container. This only gives the illusion
      that both ack and data are present in each frame, they are actually not.

Acknowledgement Scheme:
    Stored and treated internally as an integer, but like all frame data is sent as byte. Codes are as follows:
    1 (1)  : Firewall messages finished, continue standard initialization
    2 (10) : CRC error -- resend frame
    3 (11) : Message received
    4 (100): NACK -- Message firewalled, do not retransmit.
    5 (101): Source object has no more messages to send
    6 (110): Network is finished; terminate

A brief outline of my code structure:
    Frame.java: Outlines frame structure and various supported methods, including translating to and from byte arrays,
                  and reading in frames from an inputStream.

    FrameLostException.java:
                Throwable exception in case a Frame.java static method detects data loss.

    Main.java:  Main class. Based on command line argument, generates n data files, 1 switch server, and n nodes.
                Waits on each runnable object to finish before finishing itself.
                Note: main does *not* do cleanup; each object performs necessary cleanup on itself and owned threads
                Note: You can enable debugInfo flags in main to see status updates from each thread.
                      By default, debugInfo is disabled.
                      If debugInfo for all objects is disabled, you will only see error messages.

    Node.java:  Object definition for Node. Parses messages from data file and generates output file on instantiation.
                1) Sends and receives messages from paired NodeThread (Switch), writing incoming messages to output file.
                2) Wait for acknowledgement after sending a message, and retries every PERIOD/1000 seconds, to a max of RETRIES
                3) Has a 5% chance to send a "corrupt" or "garbage" frame, and a 5% chance to not acknowledge receipt
                4) Ignores messages with destination IDs that do not match Node ID.
                5) Informs NodeThread when finished sending data.
                6) Runs cleanup and terminates upon signal from NodeThread (Switch).

    NodeThread.java:
                Object definition for NodeThread.  Acts as intermediary communication thread between Switch and a Node.
                1) Establishes secondary serverSocket on local convenient port, negotiates new connection with paired Node
                2) Receives data from paired Node and adds it to the switch's buffer queue
                3) Receives data from Switch and sends to paired node
                4) Notifies Switch when unidentified client sends first message: switch will add client to switch table,
                     and NodeThread will mark paired client as identified.
                5) Notifies Switch when paired Node is finished sending data (determined via control message), then marks
                     self as finished sending data.
                6) When instructed to finish by Switch, notifies Node to finish, then performs cleanup on self.

    Switch.java:
                Object definition for Switch.  Contains 3 threads:
                1) Accept new clients on main server port, spawn NodeThread to handle communication.
                2) Manages incoming global messages from master switch and adds them to the buffer queue.
                3) Manages buffer queue and passes to NodeThread based on logical port from switch table, or if
                     destination is unidentified, floods message to all NodeThreads.
                   Waits for all NodeThreads to finish sending data, then notifies master switch.
                   Upon instruction from master switch, performs cleanup (forcefully exits other threads,
                     instructs all NodeThreads to finish)
                Before running these threads, the switch connects to and receives local firewall information from master switch.

    SwitchThread.java:
                Master switch's communication thread to second-level switches.
                Effectively the same as NodeThread, but operates on the network ID level between switches and master switch.

    CentralSwitch.java:
                The central switch definition, referred to internally as "master" switch.
                Effectively the same as Switch.java, but without the 3rd thread, and with the following mechanism:
                - Reads in firewall.txt, distinguishes global firewall info (kept internally) and local firewall info (flooded)
                - When all Switches report finished, instructs all switches to close down.


Checklist:  tl;dr I've completed everything the document required except for the shadow switch, which I considered a waste
                of time and did not implement at all.

Project Compiles and Builds without warnings or errors      complete
Switch class                                                complete
CAS, CCS Switches has a frame queue, and reads/writes       complete
    appropriately
CAS, CCS Switches allows multiple connections               complete
CAS, CCS Switches flood frames when it doesn't know the     complete
    destination
CAS, CCS Switches learn destinations, and doesn't           complete
    forward packets to any port except the one required
CAS connects to CCS                                         complete
CAS receives local firewall rules                           complete
CAS forwards traffic and ACKs properly                      complete
CCS switch opens the firewall file and gets the rules       complete
CCS passes global traffic                                   complete
CCS does the global firewalls                               complete
CCS Shadow switches run and test properly                   Not implemented
Node class                                                  complete
Nodes instantiate, and open connection to the switch        complete
Nodes open their input files, and send data to switch.      complete
Nodes open their output files, and save data that they      complete
    received
Node will sometimes drop acknowledgment                     complete
Node will sometimes create erroneous frame                  complete
Node will sometimes reject traffic                          I don't know what this means, but if it's specified in
                                                              the document for the node class, it's complete.

Known bugs:
    None that I know of
